//#include <iostream>
//
//using namespace std;
//
//int main()
//{
//	//所有商品都是乱的
//	/*当小Why按照货架的编号顺序依次访问每个货架时，我们可以通过统计商品的数量变化来计算最少需要的趟数。
//
//		首先，我们初始化一个数组 cha，长度为 n + 1，用于记录每个货架上商品的数量变化。初始时，所有货架上的商品数量都为 0。
//
//		然后，根据输入的商品信息，遍历每个商品，将其对应的货架起始位置 l 处的 cha[l] 加一，将终止位置 r 处的 cha[r] 减一。这样，遍历完所有的商品后，cha 数组中的值就表示每个货架上商品的数量变化。
//
//		接下来，我们从 1 到 n 遍历 cha 数组，并利用累加的方式计算每个货架上商品的实际数量。具体地，对于每个货架 i，我们有 cha[i] += cha[i - 1]，表示该货架的实际商品数量是前一个货架的数量加上当前货架上的变化数量。
//
//		在此过程中，我们同时维护一个变量 res 来记录当前遍历到的货架中的最大商品数量。每次更新 res 时，我们将其与当前货架的商品数量比较，取较大值。
//
//		最后，输出(res - 1) / k + 1，即最少需要的趟数。这里使用(res - 1) / k 是为了向上取整，确保足够的趟数*/
//	return 0;
//}