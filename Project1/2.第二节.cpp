#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
//int main()
//{
	//sacnf
	//strepy
	//strlen
	//strcat
	//不安全 -> 给个安全的 (不具有跨平台性性)
	//return 0;
//}
//scanf_s是VS编译器提供的 只有VS编译器认识

//局部变量是在括号内部的变量




//常量
//1.字面常量
//2.const修饰的常变量 是不可以改的
//3.#define定义的标识符常量
#define MAX 10
//int main()
//{
//	//const int num = 4;
//	//printf("%d\n", num);
//	//num = 8;//显示不可以修改
//	//printf("%d\n", num);
//
//
//
//	//const int n = 10;//n是变量 但又有常属性,所以叫做常变量
//	//int arr[n] = { 0 };//元组中还是得放常量 不放变量 哪怕是用const修饰 本质还是变量
//	//n = 20;
//	//return 0;
//
//
//
//	/*int arr[MAX] = { 0 };
//	printf("%d\n", MAX);
//	return 0;*/
//}

//4.枚举常量;枚举->一一列举
//枚举关键字 - enum


enum Sex
{
	Male,
	Female,
	Sceter
};
//male female secret 这三个就是枚举常量


enum color
{
	Red,
	Yellow,
	blue
};

//Red,Yellow,blue 这三个就是枚举常量
//int main()
//{
//	//enum Sex s = FEMALE;
//	printf("%d\n", MALE);		默认 0
//	printf("%d\n", FEMALE);		默认 1
//	printf("%d\n", SECRET);		默认 2
// 枚举常量不能改
// 但可以被用于赋值
//	return 0;
//};



//字符串类型
//"中间的是字符串" ,""什么都没有就是空字符串
//int main()
//{
//	char 变量名[] = "abc";					//数组 = 'a', 'b', 'c', '\0' 实际上结尾放个斜杠0,表示字符串的结束标志
//	char arr1[] = { 'a', 'b', 'c', '\0'};	//用调试中的监视可以看到内容 可以看到变量的元素
//	printf("%s\n", arr1);					//这个烫烫烫烫是没有斜杠零 就是不知道在哪结束 打印出来随机字符
//	printf("%s\n", 变量名);					//\0 = 0 隐藏了这个东西需要写上去 a = 97 A = 65   ASCII 码表找对应
//	return 0;
//
//
//}

//int main()
//{
//	char arr1[] = "abc";			//看到 \0 - 是个转义字符(和\n一样) 就结束了不统计了,不包括 \0是结束标志
//	char arr2[] = { 'a', 'b', 'c' };//abc后面是随机的,直到检测到 0 (也就是\0的值)才会结束
//	printf("%d\n", strlen(arr1));
//	printf("%d\n", strlen(arr2));
//	return 0;
//}

// \t - 水平制表符
// \a - 蜂鸣
// \32 - 是一个字符 是32作为8进制代表的那个十进制数字,作为ASCII码值对应的符号
// 数字32 的八进制是-> 26 26-> →对应
// \ddd ddd是指三个八进制数字 其中不能有7以上的数字
// \xdd dd表示两个十六进制的数字 对应的 ASCII码值对应的符号
//ASCII码值
//48是0 然后0-9依次递增
//A是65 A - Z依次递增  A 和 a差值是32 a是97

/*C语言的注释这样子*/  /*不能嵌套注释*/
//C++的注释是这样子的

//int main()
//{
//	int input = 0;
//	printf("你是人吗(1/0)\n");
//		scanf("%d", &input);
//		if (input == 1)
//			printf("你好人类\n");
//		else
//			printf("你好机器人\n");
//
//}

//int main()
//{
//	int line = 0;
//		while(line < 20000)
//		{
//			printf("敲一行代码:%d\n", line);
//				line++;
//		}
//		if (line >= 20000)
//			printf("头发没了");
//		return 0;
//}

//while 的语法

//while (判断条件)
//{
//	内容;
//	结束循环条件避免死循环;
//}
//return 0;

//自定义函数基础语法
//格式 函数名(参数1, 参数2, ...)	第一个格式是存储返回值
//{
//	内容;
//		return 返回值;
//}

int Add(int x, int y)
	{
		int z = x + y;
		return z;
	}





//int main()
//{
//	int num1 = 20;
//	int num2 = 10;
//	int sum = 0;
//	int a = 100;
//	int b = 200;
//	sum = Add(num1, num2);
//	printf("sum = %d\n", sum);
//	sum = Add(a, b);
//	printf("sum = %d\n", sum);
//	return 0;
//}



//容器类型
//数组:一组相同类型元素类型的集合---基础语法:存储元素格式 数组名[元素个数] '元素个数要用常量'
int arr[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; //数组中是十个整型,每个元素都有自己的
//下标索引:数组名[下标]--可以得到下标索引的元素

//int main()
//{
//	int a = 5 / 2;		//"/"是取商5 / 2的商是2
//	int a = 5 % 2;		//"%"是取模 两段一定得是整数  要有小数就用float
//	printf("%d\n", a);
//	return 0;
//}

//移位>>  <<
//int main() 
//{
//	int a = 1;
//	//整型1占4个字节-32个bit位
//	int b = a << 1;				//向左移1位 00000000000000000000000000000001 -> 00000000000000000000000000000010 a 不变
//	return 0;
//}



//二进制操作
// & 按位与 - 并集 都是1才为1

// | 按位或 - 有一个是1就是1

// ^ 按位异或 - 对应的二进制位相同,则为0
//				对应的二进制位不同,则为1

//int main()
//{
//	int a = 3;
//	int b = 5;
//	int c = a & b;//对比a 和 b   011 和 101 对比每一位 0为假 1为真的
//	//所以第三位0第二位0第一位1 结果是 001 就是c的二进制 所以c = 1
//	printf("%d\n", c);
//	int e = a | b;//对比a 和 b   011 和 101 对比每一位 0为假 1为真的
//	//所以第三位1第二位1第一位1 结果是 111 就是c的二进制 所以c = 7
//
//	int f = a ^ b;//对比a 和 b   011 和 101 对比每一位 0为假 1为真的
//	//所以第三位1第二位1第一位0 结果是 111 就是c的二进制 所以c = 6
//	return 0;
//}


//复合赋值法
//  +=  -=   &=  %=  ^=


//单目操作符(只有一个操作数的符号)

// 1.! 逻辑反操作:A = 10(真) !A = 0
// C语言中 真非0 假0

// 2.负号 -  
// 3. 正号 +(省略)
// 4.sizeof() 计算的是 变量(可以省略括号) 或者 类型(不可以省略括号) 所占的空间大小

//int main() 
//{
//	int sz = 0;
//	int arr[10] = { 0 };// 计算arr得到10个整型的大小10 * 4 = 40
//	int arr1[] = { 0, 1, 2, 3, 4, 5, 6, 7 };
//	sz = sizeof(arr) / sizeof(arr[0]); //用数组中全部的元素大小除以一个元素占用的大小得到元素的个数
//	return 0;
//}


//5.波浪号~:按(二进制位)位取反 a = 1010 -> ~a = 0101
// int a = 0;
// int b = ~a; 这里b是有符号的整形  第1位是符号 1为负数 0为正数
// 00000000000000000000000000000000 = 0 -> 11111111111111111111111111111111 = -1
// 负数在内存中存储的时候,存储的是二进制的  '补码 '

//原码 (符号位不变,其他位按位取反)  ->   反码(+1得到补码)  ->  补码
//原码 (符号位不变,其他位按位取反)  <-   反码(-1得到补码)  <-  补码


//6. --		后置--:先使用,后--
//int a = 10;
//int b = a--;  // b = a a = a - 1

//			后置--:先--,后使用

//7. ++		后置++:先使用,后++
//int a = 10;
//int b = a++;  // b = a a = a + 1

//			后置++:先++,后使用

// 8.类型操作
// 字面的小数默认是double类型
// 比如int()





//关系操作符 (判断)
//> 
//<
//>=
//<=
//==
//!= 不相等



//逻辑操作符
//|| 逻辑与 - 并且
//&& 逻辑或 - 或者





// 双目操作符(有两个操作数的符号)




// 三目操作符
//exp1(判断这个东西) ? exp2(如果是真的输出这个) :exp3(如果是假的输出这个)
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int c = (a > b ? a : b);
//	printf("%d\n", c);
//	return 0; 
//}




//逗号表达式
//从左向右依次计算, 整个表达式的结果是最后一个表达式的结果

//int main()
//{
//	int a = 10;
//	int b = 20;
//	int c = 0;
//	int d = (c = a + 2, b = c + 2, a = c + b);
//	printf("%d\n", d);
//	return 0;
//}


//下标引用操作符

// []就是下标引用操作符, arr和3就是[]的操作数
// a + b , a 和 b就是+的操作数 
//数组中下标索引可以用变量 创建数组时数组[常量]  []中要用常量


//函数调用的操作符:()  函数(参数1, 参数2)   函数, 参数1, 参数2都是()的操作数


